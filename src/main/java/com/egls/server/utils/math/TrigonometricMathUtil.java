package com.egls.server.utils.math;

import com.egls.server.utils.NumberUtil;
import com.egls.server.utils.random.RandomUtil;

/**
 * 提供一些三角函数的工具方法
 *
 * @author mayer - [Created on 2018-08-09 21:46]
 */
public final class TrigonometricMathUtil {

    /**
     * 0.5 - 89.5
     */
    private static final double[] SLOPE_QUADRANT_1 = new double[]{
            0.00872686779075879000000000000000000,
            0.02618592156918692800000000000000000,
            0.04366094290851206000000000000000000,
            0.06116262015048430600000000000000000,
            0.07870170682461844000000000000000000,
            0.09628904819753861000000000000000000,
            0.11393560830164548000000000000000000,
            0.13165249758739583000000000000000000,
            0.14945100134912778000000000000000000,
            0.16734260908141957000000000000000000,
            0.18533904493153439000000000000000000,
            0.20345229942369933000000000000000000,
            0.22169466264293988000000000000000000,
            0.24007875908011603000000000000000000,
            0.25861758435589030000000000000000000,
            0.27732454405983850000000000000000000,
            0.29621349496208020000000000000000000,
            0.31529878887898350000000000000000000,
            0.33459531950207316000000000000000000,
            0.35411857253069806000000000000000000,
            0.37388467948480470000000000000000000,
            0.39391047561494240000000000000000000,
            0.41421356237309503000000000000000000,
            0.43481237496093360000000000000000000,
            0.45572625553258460000000000000000000,
            0.47697553269816010000000000000000000,
            0.49858160805343150000000000000000000,
            0.52056705055174620000000000000000000,
            0.54295569963843680000000000000000000,
            0.56577277818776990000000000000000000,
            0.58904501642055100000000000000000000,
            0.61280078813993200000000000000000000,
            0.63707026080749320000000000000000000,
            0.66188556119569150000000000000000000,
            0.68728095860161330000000000000000000,
            0.71329306789700530000000000000000000,
            0.73996107502848760000000000000000000,
            0.76732698797896040000000000000000000,
            0.79543591666782830000000000000000000,
            0.82433638581749570000000000000000000,
            0.85408068546346660000000000000000000,
            0.88472526455594380000000000000000000,
            0.91633117401742330000000000000000000,
            0.94896456671487960000000000000000000,
            0.98269726311569000000000000000000000,
            1.01760739297212520000000000000000000,
            1.05378012528096220000000000000000000,
            1.09130850106927160000000000000000000,
            1.13029438636175300000000000000000000,
            1.17084956611253930000000000000000000,
            1.21309700409293280000000000000000000,
            1.25717229891895440000000000000000000,
            1.30322537284120580000000000000000000,
            1.35142243794580820000000000000000000,
            1.40194829447633550000000000000000000,
            1.45500902867244490000000000000000000,
            1.51083519361490070000000000000000000,
            1.56968557711749020000000000000000000,
            1.63185168712878940000000000000000000,
            1.69766311932608900000000000000000000,
            1.76749401624289100000000000000000000,
            1.84177088603345800000000000000000000,
            1.92098212697116500000000000000000000,
            2.00568970825902000000000000000000000,
            2.09654359908817400000000000000000000,
            2.19429973116503740000000000000000000,
            2.29984254723625670000000000000000000,
            2.41421356237309500000000000000000000,
            2.53864789566430730000000000000000000,
            2.67462149392682360000000000000000000,
            2.82391288560080100000000000000000000,
            2.98868496274289170000000000000000000,
            3.17159480236321350000000000000000000,
            3.37594342259124460000000000000000000,
            3.60588350876087300000000000000000000,
            3.86671309489873700000000000000000000,
            4.16529977009041600000000000000000000,
            4.51070850366205600000000000000000000,
            4.91515703107120500000000000000000000,
            5.39551717431913150000000000000000000,
            5.97576436443306700000000000000000000,
            6.69115623831740300000000000000000000,
            7.59575411272514240000000000000000000,
            8.77688735686994900000000000000000000,
            10.3853970801381500000000000000000000,
            12.7062047361746960000000000000000000,
            16.3498554760996630000000000000000000,
            22.9037655484311920000000000000000000,
            38.1884592970253040000000000000000000,
            114.588650129310110000000000000000000,
    };

    /**
     * 90.5 - 179.5
     */
    private static final double[] SLOPE_QUADRANT_2 = new double[]{
            -114.588650129311720000000000000000000,
            -38.1884592970258100000000000000000000,
            -22.9037655484312560000000000000000000,
            -16.3498554760996380000000000000000000,
            -12.7062047361747150000000000000000000,
            -10.3853970801381640000000000000000000,
            -8.77688735686995800000000000000000000,
            -7.59575411272516300000000000000000000,
            -6.69115623831740800000000000000000000,
            -5.97576436443306300000000000000000000,
            -5.39551717431913500000000000000000000,
            -4.91515703107120800000000000000000000,
            -4.51070850366205900000000000000000000,
            -4.16529977009042300000000000000000000,
            -3.86671309489873540000000000000000000,
            -3.60588350876087470000000000000000000,
            -3.37594342259124600000000000000000000,
            -3.17159480236321500000000000000000000,
            -2.98868496274289500000000000000000000,
            -2.82391288560080200000000000000000000,
            -2.67462149392682300000000000000000000,
            -2.53864789566430800000000000000000000,
            -2.41421356237309540000000000000000000,
            -2.29984254723625700000000000000000000,
            -2.19429973116503960000000000000000000,
            -2.09654359908817330000000000000000000,
            -2.00568970825901970000000000000000000,
            -1.92098212697116670000000000000000000,
            -1.84177088603345780000000000000000000,
            -1.76749401624289140000000000000000000,
            -1.69766311932609030000000000000000000,
            -1.63185168712878980000000000000000000,
            -1.56968557711748980000000000000000000,
            -1.51083519361490120000000000000000000,
            -1.45500902867244550000000000000000000,
            -1.40194829447633600000000000000000000,
            -1.35142243794580890000000000000000000,
            -1.30322537284120550000000000000000000,
            -1.25717229891895500000000000000000000,
            -1.21309700409293250000000000000000000,
            -1.17084956611253950000000000000000000,
            -1.13029438636175360000000000000000000,
            -1.09130850106927160000000000000000000,
            -1.05378012528096180000000000000000000,
            -1.01760739297212520000000000000000000,
            -0.98269726311569050000000000000000000,
            -0.94896456671488050000000000000000000,
            -0.91633117401742360000000000000000000,
            -0.88472526455594360000000000000000000,
            -0.85408068546346680000000000000000000,
            -0.82433638581749620000000000000000000,
            -0.79543591666782850000000000000000000,
            -0.76732698797896070000000000000000000,
            -0.73996107502848760000000000000000000,
            -0.71329306789700580000000000000000000,
            -0.68728095860161310000000000000000000,
            -0.66188556119569180000000000000000000,
            -0.63707026080749360000000000000000000,
            -0.61280078813993210000000000000000000,
            -0.58904501642055080000000000000000000,
            -0.56577277818777020000000000000000000,
            -0.54295569963843730000000000000000000,
            -0.52056705055174630000000000000000000,
            -0.49858160805343177000000000000000000,
            -0.47697553269816070000000000000000000,
            -0.45572625553258490000000000000000000,
            -0.43481237496093350000000000000000000,
            -0.41421356237309515000000000000000000,
            -0.39391047561494275000000000000000000,
            -0.37388467948480475000000000000000000,
            -0.35411857253069784000000000000000000,
            -0.33459531950207316000000000000000000,
            -0.31529878887898377000000000000000000,
            -0.29621349496208020000000000000000000,
            -0.27732454405983864000000000000000000,
            -0.25861758435589066000000000000000000,
            -0.24007875908011617000000000000000000,
            -0.22169466264293977000000000000000000,
            -0.20345229942369944000000000000000000,
            -0.18533904493153464000000000000000000,
            -0.16734260908141957000000000000000000,
            -0.14945100134912800000000000000000000,
            -0.13165249758739583000000000000000000,
            -0.11393560830164566000000000000000000,
            -0.09628904819753854000000000000000000,
            -0.07870170682461856000000000000000000,
            -0.06116262015048462600000000000000000,
            -0.04366094290851213500000000000000000,
            -0.02618592156918675400000000000000000,
            -0.00872686779075881400000000000000000,
    };

    /**
     * 180.5 - 269.5
     */
    private static final double[] SLOPE_QUADRANT_3 = new double[]{
            0.00872686779075856700000000000000000,
            0.02618592156918650800000000000000000,
            0.04366094290851188500000000000000000,
            0.06116262015048393000000000000000000,
            0.07870170682461787000000000000000000,
            0.09628904819753830000000000000000000,
            0.11393560830164587000000000000000000,
            0.13165249758739603000000000000000000,
            0.14945100134912775000000000000000000,
            0.16734260908141932000000000000000000,
            0.18533904493153439000000000000000000,
            0.20345229942369916000000000000000000,
            0.22169466264293950000000000000000000,
            0.24007875908011590000000000000000000,
            0.25861758435588994000000000000000000,
            0.27732454405983790000000000000000000,
            0.29621349496207994000000000000000000,
            0.31529878887898350000000000000000000,
            0.33459531950207340000000000000000000,
            0.35411857253069806000000000000000000,
            0.37388467948480447000000000000000000,
            0.39391047561494247000000000000000000,
            0.41421356237309487000000000000000000,
            0.43481237496093317000000000000000000,
            0.45572625553258456000000000000000000,
            0.47697553269815984000000000000000000,
            0.49858160805343090000000000000000000,
            0.52056705055174600000000000000000000,
            0.54295569963843690000000000000000000,
            0.56577277818777040000000000000000000,
            0.58904501642055120000000000000000000,
            0.61280078813993180000000000000000000,
            0.63707026080749330000000000000000000,
            0.66188556119569140000000000000000000,
            0.68728095860161280000000000000000000,
            0.71329306789700530000000000000000000,
            0.73996107502848730000000000000000000,
            0.76732698797895970000000000000000000,
            0.79543591666782740000000000000000000,
            0.82433638581749580000000000000000000,
            0.85408068546346720000000000000000000,
            0.88472526455594390000000000000000000,
            0.91633117401742310000000000000000000,
            0.94896456671488000000000000000000000,
            0.98269726311569000000000000000000000,
            1.01760739297212480000000000000000000,
            1.05378012528096130000000000000000000,
            1.09130850106927100000000000000000000,
            1.13029438636175200000000000000000000,
            1.17084956611253780000000000000000000,
            1.21309700409293080000000000000000000,
            1.25717229891895440000000000000000000,
            1.30322537284120490000000000000000000,
            1.35142243794580950000000000000000000,
            1.40194829447633640000000000000000000,
            1.45500902867244490000000000000000000,
            1.51083519361490030000000000000000000,
            1.56968557711748900000000000000000000,
            1.63185168712878740000000000000000000,
            1.69766311932608580000000000000000000,
            1.76749401624289050000000000000000000,
            1.84177088603345670000000000000000000,
            1.92098212697116750000000000000000000,
            2.00568970825902060000000000000000000,
            2.09654359908817420000000000000000000,
            2.19429973116503700000000000000000000,
            2.29984254723625450000000000000000000,
            2.41421356237309100000000000000000000,
            2.53864789566430800000000000000000000,
            2.67462149392682270000000000000000000,
            2.82391288560079800000000000000000000,
            2.98868496274288800000000000000000000,
            3.17159480236320460000000000000000000,
            3.37594342259124600000000000000000000,
            3.60588350876087100000000000000000000,
            3.86671309489874560000000000000000000,
            4.16529977009042200000000000000000000,
            4.51070850366205900000000000000000000,
            4.91515703107120200000000000000000000,
            5.39551717431912800000000000000000000,
            5.97576436443304600000000000000000000,
            6.69115623831737700000000000000000000,
            7.59575411272514900000000000000000000,
            8.77688735686993800000000000000000000,
            10.3853970801382080000000000000000000,
            12.7062047361747470000000000000000000,
            16.3498554760996900000000000000000000,
            22.9037655484311280000000000000000000,
            38.1884592970251260000000000000000000,
            114.588650129302660000000000000000000,
    };

    /**
     * 270.5 - 359.5
     */
    private static final double[] SLOPE_QUADRANT_4 = new double[]{
            -114.588650129307500000000000000000000,
            -38.1884592970256600000000000000000000,
            -22.9037655484313200000000000000000000,
            -16.3498554760997870000000000000000000,
            -12.7062047361748080000000000000000000,
            -10.3853970801382500000000000000000000,
            -8.77688735686996700000000000000000000,
            -7.59575411272517000000000000000000000,
            -6.69115623831739400000000000000000000,
            -5.97576436443306000000000000000000000,
            -5.39551717431913900000000000000000000,
            -4.91515703107121100000000000000000000,
            -4.51070850366206700000000000000000000,
            -4.16529977009042900000000000000000000,
            -3.86671309489875140000000000000000000,
            -3.60588350876087650000000000000000000,
            -3.37594342259125040000000000000000000,
            -3.17159480236320860000000000000000000,
            -2.98868496274289170000000000000000000,
            -2.82391288560080100000000000000000000,
            -2.67462149392682600000000000000000000,
            -2.53864789566431100000000000000000000,
            -2.41421356237309360000000000000000000,
            -2.29984254723625670000000000000000000,
            -2.19429973116503870000000000000000000,
            -2.09654359908817640000000000000000000,
            -2.00568970825902240000000000000000000,
            -1.92098212697116930000000000000000000,
            -1.84177088603345830000000000000000000,
            -1.76749401624289200000000000000000000,
            -1.69766311932608720000000000000000000,
            -1.63185168712878870000000000000000000,
            -1.56968557711749020000000000000000000,
            -1.51083519361490160000000000000000000,
            -1.45500902867244600000000000000000000,
            -1.40194829447633750000000000000000000,
            -1.35142243794581040000000000000000000,
            -1.30322537284120600000000000000000000,
            -1.25717229891895530000000000000000000,
            -1.21309700409293160000000000000000000,
            -1.17084956611253870000000000000000000,
            -1.13029438636175300000000000000000000,
            -1.09130850106927180000000000000000000,
            -1.05378012528096290000000000000000000,
            -1.01760739297212630000000000000000000,
            -0.98269726311568980000000000000000000,
            -0.94896456671487990000000000000000000,
            -0.91633117401742390000000000000000000,
            -0.88472526455594460000000000000000000,
            -0.85408068546346770000000000000000000,
            -0.82433638581749720000000000000000000,
            -0.79543591666782880000000000000000000,
            -0.76732698797896090000000000000000000,
            -0.73996107502848720000000000000000000,
            -0.71329306789700520000000000000000000,
            -0.68728095860161330000000000000000000,
            -0.66188556119569190000000000000000000,
            -0.63707026080749380000000000000000000,
            -0.61280078813993290000000000000000000,
            -0.58904501642055230000000000000000000,
            -0.56577277818777030000000000000000000,
            -0.54295569963843740000000000000000000,
            -0.52056705055174590000000000000000000,
            -0.49858160805343140000000000000000000,
            -0.47697553269816030000000000000000000,
            -0.45572625553258500000000000000000000,
            -0.43481237496093417000000000000000000,
            -0.41421356237309580000000000000000000,
            -0.39391047561494236000000000000000000,
            -0.37388467948480490000000000000000000,
            -0.35411857253069845000000000000000000,
            -0.33459531950207383000000000000000000,
            -0.31529878887898440000000000000000000,
            -0.29621349496208030000000000000000000,
            -0.27732454405983875000000000000000000,
            -0.25861758435588983000000000000000000,
            -0.24007875908011583000000000000000000,
            -0.22169466264293988000000000000000000,
            -0.20345229942369955000000000000000000,
            -0.18533904493153477000000000000000000,
            -0.16734260908142015000000000000000000,
            -0.14945100134912860000000000000000000,
            -0.13165249758739594000000000000000000,
            -0.11393560830164579000000000000000000,
            -0.09628904819753821000000000000000000,
            -0.07870170682461824000000000000000000,
            -0.06116262015048430000000000000000000,
            -0.04366094290851226000000000000000000,
            -0.02618592156918732000000000000000000,
            -0.00872686779075937900000000000000000,
    };

    /**
     * 从点1到点2的角度
     */
    public static short getAngle(final double x1, final double y1, final double x2, final double y2) {
        if (NumberUtil.doubleIsEqual(x1, x2) && NumberUtil.doubleIsEqual(y1, y2)) {
            //same point, error.
            return 0;
        }

        final short offset;
        final double[] slopeQuadrant;
        final double dx = x2 - x1;
        final double dy = y2 - y1;
        if (NumberUtil.isApproximateZero(dy)) {
            //0或者180
            return (short) (dx > 0 ? 0 : 180);
        } else if (NumberUtil.isApproximateZero(dx)) {
            //90 或者 270
            return (short) (dy > 0 ? 90 : 270);
        } else if (dx > 0 && dy > 0) {
            //1象限,0-90
            offset = 0;
            slopeQuadrant = SLOPE_QUADRANT_1;
        } else if (dx < 0 && dy > 0) {
            //2象限,90-180
            offset = 90;
            slopeQuadrant = SLOPE_QUADRANT_2;
        } else if (dx < 0 && dy < 0) {
            //3象限,180-270
            offset = 180;
            slopeQuadrant = SLOPE_QUADRANT_3;
        } else if (dx > 0 && dy < 0) {
            //4象限,270-360
            offset = 270;
            slopeQuadrant = SLOPE_QUADRANT_4;
        } else {
            //same point, error.
            return 0;
        }

        final double slope = dy / dx;
        int hit = slopeQuadrant.length - 1;
        int low = 0;
        int high = hit;
        //二分查找.
        while (low <= high) {
            int mid = (low + high) >>> 1;
            double midVal = slopeQuadrant[mid];
            if (slope > midVal) {
                low = mid + 1;
            } else if (slope < midVal) {
                hit = mid;
                high = mid - 1;
            } else {
                hit = mid;
                break;
            }
        }
        return (short) truncateAngle(offset + hit);
    }

    public static double getRadian(final double x1, final double y1, final double x2, final double y2) {
        return toRadian(getAngle(x1, y1, x2, y2));
    }

    public static double toRadian(final double angle) {
        return angle / 180 * Math.PI;
    }

    public static double toAngle(final double radian) {
        return radian / Math.PI * 180;
    }

    /**
     * 按照周期将弧度进行化间为第一周期弧度
     *
     * @param radian 弧度
     * @return 取整的弧度
     */
    public static double truncateRadian(final double radian) {
        return toRadian(truncateAngle(toAngle(radian)));
    }

    /**
     * 按照周期将角度进行化间为第一周期角度
     *
     * @param angle 角度
     * @return 取整的角度
     */
    public static double truncateAngle(final double angle) {
        double truncateAngle = angle;
        if (truncateAngle < 0) {
            //换算成正数的角度
            final long multiple = (long) (Math.floor(Math.abs(truncateAngle / 360))) + 1;
            truncateAngle = truncateAngle + (360 * multiple);
        }
        final long multiple = (long) (Math.floor(Math.abs(truncateAngle / 360)));
        return truncateAngle - (360 * multiple);
    }

    /**
     * 随机一个弧度
     *
     * @return 弧度
     */
    public static double randomRadian() {
        return toRadian(randomAngle());
    }

    /**
     * 随机一个角度
     *
     * @return 角度
     */
    public static double randomAngle() {
        return RandomUtil.randomInt(360);
    }

    public static double getSinByRadian(final double radian) {
        return Math.sin(radian);
    }

    public static double getCosByRadian(final double radian) {
        return Math.cos(radian);
    }

}
